// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./IERC20.sol";
import "./SafeMath.sol";
import "./Ownable.sol";

contract QUACKToken is IERC20, Ownable {
    using SafeMath for uint256;

    string private _name;
    string private _symbol;
    uint8 private _decimals;
    uint256 private _totalSupply;
    uint256 private _maxSupply;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _isExcludedFromDeflation;
    mapping(address => bool) private _isExcludedFromTaxation;

    uint256 private _deflationRate;
    address private _taxAddress;

    constructor(
        string memory name_,
        string memory symbol_,
        uint256 initialSupply_,
        uint256 maxSupply_
    ) {
        _name = name_;
        _symbol = symbol_;
        _decimals = 18;
        _totalSupply = initialSupply_ * 10**_decimals;
        _maxSupply = maxSupply_ * 10**_decimals;
        _balances[msg.sender] = _totalSupply;

        _deflationRate = 1; // 1% deflation rate
        _taxAddress = address(0xbA56EC3927e58FaAD10416e5EE5d5e55926F76E4); // Predefined tax address

        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function name() public view override returns (string memory) {
        return _name;
    }

    function symbol() public view override returns (string memory) {
        return _symbol;
    }

    function decimals() public view override returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount)
        public
        override
        returns (bool)
    {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        override
        returns (bool)
    {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            msg.sender,
            _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance")
        );
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            _allowances[msg.sender][spender].add(addedValue)
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            _allowances[msg.sender][spender].sub(
                subtractedValue,
                "ERC20: decreased allowance below zero"
            )
        );
        return true;
    }

    function mint(address account, uint256 amount) public onlyOwner {
        require(
            totalSupply().add(amount) <= _maxSupply,
            "ERC20: Exceeds max supply"
        );
        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }

    function setDeflationRate(uint256 rate) public onlyOwner {
        require(rate <= 100, "ERC20: Invalid deflation rate");
        _deflationRate = rate;
    }

    function excludeFromDeflation(address account) public onlyOwner {
        _isExcludedFromDeflation[account] = true;
    }

    function includeInDeflation(address account) public onlyOwner {
        _isExcludedFromDeflation[account] = false;
    }

    function excludeFromTaxation(address account) public onlyOwner {
        _isExcludedFromTaxation[account] = true;
    }

    function includeInTaxation(address account) public onlyOwner {
        _isExcludedFromTaxation[account] = false;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "ERC20: Transfer amount must be greater than zero");
        require(
            _balances[sender] >= amount,
            "ERC20: Transfer amount exceeds balance"
        );

        uint256 deflationAmount = amount.mul(_deflationRate).div(100);
        uint256 taxedAmount = amount.sub(deflationAmount);

        _balances[sender] = _balances[sender].sub(amount);
        _balances[recipient] = _balances[recipient].add(taxedAmount);
        _totalSupply = _totalSupply.sub(deflationAmount);

        if (!_isExcludedFromDeflation[recipient]) {
            _totalSupply = _totalSupply.sub(deflationAmount);
            emit Transfer(sender, address(0), deflationAmount);
        }

        if (!_isExcludedFromTaxation[recipient]) {
            _balances[_taxAddress] = _balances[_taxAddress].add(deflationAmount);
            emit Transfer(sender, _taxAddress, deflationAmount);
        }

        emit Transfer(sender, recipient, taxedAmount);
    }

    function _burn(address account, uint256 amount) internal {
        require(amount > 0, "ERC20: Burn amount must be greater than zero");
        require(
            _balances[account] >= amount,
            "ERC20: Burn amount exceeds balance"
        );

        _balances[account] = _balances[account].sub(amount);
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}
